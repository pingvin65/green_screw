package com.green.screw.java.errors;

import java.io.IOException;
import java.util.Optional;

import javax.servlet.http.HttpServletRequest;
import javax.servlet.http.HttpServletResponse;
import javax.validation.ConstraintViolationException;
import org.springframework.data.mapping.PropertyReferenceException;
import org.springframework.hateoas.mediatype.vnderrors.VndErrors;
import org.springframework.http.HttpStatus;
import org.springframework.http.ResponseEntity;
import org.springframework.web.bind.annotation.ControllerAdvice;
import org.springframework.web.bind.annotation.ExceptionHandler;
import org.springframework.web.bind.annotation.RequestMapping;
import org.springframework.web.bind.annotation.ResponseBody;
import org.springframework.web.bind.annotation.ResponseStatus;

@ControllerAdvice
@RequestMapping(produces = "application/vnd.error+json")
public class ScrewNotFoundAdvice {
    // @Validate For Validating Path Variables and Request Parameters
    @ExceptionHandler(PropertyReferenceException.class)
    PropertyReferenceException constraintViolationException(HttpServletResponse response, HttpServletRequest request) throws IOException {
		ErrorDetail error = new ErrorDetail();
		System.out.println(response.getStatus());
//		error.setStatus(HttpStatus.BAD_REQUEST.value());
//		error.setMessage("dfddfdf ");
//		error.setUrl(request.getRequestURL().toString());
//		
		return null;
    	

//        response.sendError(HttpStatus.BAD_REQUEST.value());
    }

//	@ResponseBody
//	@ExceptionHandler({org.springframework.data.mapping.PropertyReferenceException.class}) 
//	@ResponseStatus(HttpStatus.INTERNAL_SERVER_ERROR)
//	ErrorDetail serverHandler(HttpServletRequest request, ScrewNotFoundException ex) {
//		System.out.println("jjjjjjjjjjjjjjjj");
//		ErrorDetail error = new ErrorDetail();
//	    error.setStatus(HttpStatus.INTERNAL_SERVER_ERROR.value());
//	    error.setMessage("Server error");
//	    error.setUrl(request.getRequestURL().toString());
//	    return error;
//
//	}

	@ResponseBody
	@ExceptionHandler(ScrewNotFoundException.class)
	@ResponseStatus(HttpStatus.NOT_FOUND)
	ErrorDetail supplierNotFoundHandler(HttpServletRequest request, ScrewNotFoundException ex) {
		ErrorDetail error = new ErrorDetail();
		error.setStatus(HttpStatus.NOT_FOUND.value());
		error.setMessage(ex.getMessage());
		error.setUrl(request.getRequestURL().toString());
		return error;

	}

	private ResponseEntity<VndErrors> error(final Exception exception, final HttpStatus httpStatus,
			final String logRef) {
		final String message = Optional.of(exception.getMessage()).orElse(exception.getClass().getSimpleName());
		return new ResponseEntity<>(new VndErrors(logRef, message), httpStatus);
	}

	@ExceptionHandler(IllegalArgumentException.class)
	public ResponseEntity<VndErrors> assertionException(final IllegalArgumentException e) {
		return error(e, HttpStatus.NOT_FOUND, e.getLocalizedMessage());
	}
}
